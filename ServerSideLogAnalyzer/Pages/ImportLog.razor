@page "/Importlog"

@using DataLibrary
@using ServerSideLogAnalyzer.Models
@using Microsoft.Extensions.Configuration
@inject IDataAccess _data
@inject IConfiguration _config

<link href="css/MyStyles/MyStyles.css" rel="stylesheet" />

<h1>Tu nahrajte Log!</h1>

<form>
    <label for="myfile">Vyberte súbory:</label>
    <input type="file" id="myfile" name="myfile" multiple><br><br>
    <input type="submit">
</form>

<p>

</p>

<p class="display-2">Poznámky k logom:</p>

@if (logs == null)
{
    <p><em>Načítava sa...</em></p>
}
else
{

    <table class="table">
        <thead class="thead-dark">
            <tr>
                <th scope="col">#ID</th>
                <th scope="col">Date & Time</th>
                <th scope="col">Discription</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in logs)
            {
                <tr>
                    <th scope="row">@item.idLogs</th>
                    <td>@item.Date.ToString("MM/dd/yyyy")</td>
                    <td>@item.Discription</td>
                </tr>
            }
        </tbody>
    </table>
}

<div class="container">
    <div class="row">
        <div class="col-sm">
            <EditForm Model="@_info" OnValidSubmit="@HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <InputNumber id="idValueInsert" @bind-Value="_info.idValueInsert" />
                <InputDate id="ValueDateInsert" @bind-Value="_info.dateValueInsert" />
                <InputText id="ValueInsert" @bind-Value="_info.discriptionValueInsert" />
                <button type="submit" @onclick="InsertData">Insert</button>

            </EditForm>
        </div>
        <div class="col-sm">
            <EditForm Model="@_infoUpdate" OnValidSubmit="@HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <InputNumber id="idValueUpdate" @bind-Value="_infoUpdate.idValueUpdate" />
                <InputDate id="ValueDateUpdate" @bind-Value="_infoUpdate.dateValueUpdate" />
                <InputText id="ValueUpdate" @bind-Value="_infoUpdate.discriptionValueUpdate" />
                <button type="submit" @onclick="UpdateData">Update</button>

            </EditForm>
        </div>
        <div class="col-sm">
            <EditForm Model="@_infoDelete" OnValidSubmit="@HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <p>Enter ID:</p>
                <InputNumber id="idValueDelete" @bind-Value="_infoDelete.idValueDelete" />
                <button type="submit" @onclick="DeleteData">Delete</button>

            </EditForm>
        </div>
    </div>
</div>

@code {

    private void HandleValidSubmit()
    {
        // Process the valid form
    }

    public class InfoInsert
    {
        public int idValueInsert { get; set; }
        public DateTime dateValueInsert { get; set; }
        public string discriptionValueInsert { get; set; }
    }

    public class InfoUpdate
    {
        public int idValueUpdate { get; set; }
        public DateTime dateValueUpdate { get; set; }
        public string discriptionValueUpdate { get; set; }
    }

    public class InfoDelete
    {
        public int idValueDelete { get; set; }
    }

    List<LogModel> logs;

    private async Task InsertData()
    {
        string sql = "insert into logs (idLogs, Date, Discription) values (@idLogs, @Date, @Discription);";

        await _data.SaveData(sql, new { idLogs = _info.idValueInsert, Date = _info.dateValueInsert, Discription = _info.discriptionValueInsert }, _config.GetConnectionString("default"));

        await OnInitializedAsync();

    }

    private async Task UpdateData()
    {
        string sql = "update logs set Date = @Date,Discription = @Discription where idLogs = @idLogs";

        await _data.SaveData(sql, new { idLogs = _infoUpdate.idValueUpdate, Date = _infoUpdate.dateValueUpdate, Discription = _infoUpdate.discriptionValueUpdate }, _config.GetConnectionString("default"));

        await OnInitializedAsync();
    }

    private async Task DeleteData()
    {
        string sql = "delete from logs where idLogs = @idLogs";

        await _data.SaveData(sql, new { idLogs = _infoDelete.idValueDelete }, _config.GetConnectionString("default"));

        await OnInitializedAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        string sql = "select * from logs";
        logs = await _data.LoadData<LogModel, dynamic>(sql, new { }, _config.GetConnectionString("default"));
    }

    private InfoInsert _info { get; set; } = new InfoInsert();
    private InfoUpdate _infoUpdate { get; set; } = new InfoUpdate();
    private InfoDelete _infoDelete { get; set; } = new InfoDelete();

}

